<?phprequire_once(dirname(__FILE__).'/class.sing.php');require_once(dirname(__FILE__).'/class.single.php');class Nav {	private $xml;	private $path;	private $html;	private $it;	public function __construct( ) {		$lang = 'fr'; if(isset($_SESSION['lang'])) $lang = $_SESSION['lang'];		if(!isset($_SESSION['nav']))			$this -> path = dirname(dirname(__FILE__)).'/xml/'.$lang.'/nav.xml';		else				$this -> path = dirname(dirname(__FILE__)).'/xml/'.$lang.'/nav.xml';		if(file_exists($this -> path))		{			$context  = stream_context_create(array('http' => array('header' => 'Accept: application/xml')));			$xml = file_get_contents($this -> path, false, $context);			if ( substr_count ( $xml , '<' ) < 2 )				$this -> xml = new SimpleXMLElement('<nav>  <link id="index" type="page" href="" name="Index" parent="" hidden="0" unlisted="0"/></nav>');			else				$this -> xml = simplexml_load_string($xml);		} else			$this -> xml = new SimpleXMLElement('<nav><link id="index" type="page" href="" name="Index" parent="" hidden="0" unlisted="0"/></nav>');	}	public function newLink($id,$type = '',$href = '',$name = '',$parent = '') {		if($id=='') return false;		if(!empty($parent))		{			$this->newChild($parent,Array('id' => $id, 'type' => $type, 'href' => $href, 'name' => $name, 'parent' => $parent));			return false;		}		foreach( $this -> xml -> children() as $element)			if( $element['id'] == $id ) return false;		$link = $this -> xml -> addChild('link');		$link->addAttribute('id', $id);		$link->addAttribute('type', $type);		$link->addAttribute('href', $href);		$link->addAttribute('name', $name);		$link->addAttribute('parent', $parent);		$link->addAttribute('hidden', 0);		$link->addAttribute('unlisted', 0);		return true;	}	public function removeElement($id) {		foreach ($this->xml->xpath('//link') as $element)			if( $element['id'] == $id )			{				$dom=dom_import_simplexml($element);				$dom->parentNode->removeChild($dom);				return true;			}		return false;	}	public function editLink($id, $type, $href, $name,$parent) {		if(!empty($parent))		{			// 	$this->removeElement($id);			$this->newChild($parent,Array('id' => $id, 'type' => $type, 'href' => $href, 'name' => $name, 'parent' => $parent));		} else {			foreach ($this->xml->xpath('//link') as $element)				if( $element['id'] == $id )				{					$element['type'] = $type;					$element['href'] = $href;					$element['name'] = $name;					$element['parent'] = $parent;					return true;				}		}		return false;	}	public function newChild($parent,$params) {		foreach ($this->xml->xpath('//link') as $element)			if($element['id']==$parent)				{				foreach( $element -> children() as $child)					if( $child['id'] == $params['id'] )						return false;					$link = $element -> addChild('link');					$link->addAttribute('id', $params['id']);					$link->addAttribute('type', $params['type']);					$link->addAttribute('href', $params['href']);					$link->addAttribute('name', $params['name']);					$link->addAttribute('parent', $params['parent']);					return true;				}	}	public function downElement($id) {		$next = false;		foreach ($this->xml->xpath('//link') as $element)		{			if($next)			{				$next = false;				$this->removeElement($el['id']);				$this->simplexml_insert_after($el,$element);				return true;			}			if( $element['id'] == $id )			{				$el = $element;				$next = true;			}		}		return false;	}	public function hideElement($id,$visibility) {		$test = $this->xml->xpath('//link[@id=\''.$id.'\']');		$test[0]['hidden']=$visibility;	}	public function hideElementFromList($id,$visibility) {		$test = $this->xml->xpath('//link[@id=\''.$id.'\']');		$test[0]['unlisted']=$visibility;	}	public function HTMLRecursive($element,$i,$id,$path,$parents=Array())	{		$el = array('id'=>-1);		if(++$i>1) echo "<ul>";		else { echo "</li>"; }		if($element['type']=='page')			$parents[] = $element['id'];			foreach ($element->children() as $child) {			if($child['id']!='index'){				if($id==$child['id'])					echo "<li class='active'>";				else					echo "<li>";				if($child['type']!='lien')					echo "<a href='#".$child['id']."'>";				else				{					$test = '';					foreach($parents as $parent)						$test.=$parent;					if ($child['href']!='#' && $element['id']!= $id && ( strpos($child['href'],'http://') === false && strpos($child['href'],'https://') === false))					{						echo "<a href='#";						echo $child['href']."'>";					} else					echo "<a href='".$child['href']."'>";				}			echo "<span data-hover='".$child['name']."'>";			echo $child['name'];			echo "</span>";			echo "</a>";			}			$el = $child;			if(count($child->children()))				$this->HTMLRecursive($child,$i,$id,$path,$parents);		}		if($i>1) echo "</ul></li>\n";	}	public function isActive($id,$child){		if($id==$child['id']) return true;		else {			if($child->children())				foreach($child->children() as $element){					if($id==$element['id']) return true;				}		}		return false;	}	public function standardHTMLRecursive($element,$i,$id,$path,$parent='')	{		$el = array('id'=>-1);		if(++$i>1) echo "<ul>";		$config = new Sing('cfg');		foreach ($element->children() as $child) {			if($child['unlisted']==0)			{				echo "\n 		<li";				if($child['id']!='index') {					if($this->isActive($id,$child)) echo ' class="active"';				} else  {					if($this->isActive($id,$child))						echo ' class="active index"';					else						echo ' class="index"';				}				echo ">";				if(isset($_SESSION['lang'])&&$_SESSION['lang']!='en')					echo '<a href="'.BASE_URL.$_SESSION['lang'].'/'.$parent.$child['id'].'" class="link">';				else {					if($child['type']!="lien")						if($child['id']=="index")						echo '<a href="'.BASE_URL.$parent.'" data-letter="';						else						echo '<a href="'.BASE_URL.$parent.$child['id'].'" data-letter="';					else						echo '<a href="'.BASE_URL.$child['href'].'" data-letter="';					if($child['id']!='index') echo substr($child['name'],0,1);					echo '" class="link">';				}				if($child['id']=="index" && $config->get('Picto'))				{					echo '<span><img src="'.BASE_URL.'ups/cfg/'.$config->getBackground('Picto')[0].'" /></span>';					}				else					echo '<span>'.$child['name'].'</span>';				echo "</a>";				$el = $child;				$parentid = $child['id'].'/';				if($child['type']=='container')					$parentid = '#';				if(count($child->children()))					$this->standardHTMLRecursive($child,$i,$id,$path,$parentid);			}		}		if($i>1) echo "</ul></li>";	}	public function standardHTMLRecursiveNoIndex($element,$i,$id,$path,$parent='')	{		$el = array('id'=>-1);		if(++$i>1) echo "<ul>";		$config = new Sing('cfg');		foreach ($element->children() as $child) {			if($child['unlisted']==0)			{				echo "\n 		<li";					if($this->isActive($id,$child)) echo ' class="active"';				echo ">";				if(isset($_SESSION['lang'])&&$_SESSION['lang']!='fr'){					if($child['id']!='index')					echo '<a href="'.BASE_URL.$_SESSION['lang'].'/'.$parent.$child['id'].'" class="link">';					else					echo '<a href="'.BASE_URL.$_SESSION['lang'].'/'.$parent.'" class="link">';					}				else {					if($child['type']!="lien")					{						if($child['id']!='index')						echo '<a href="'.BASE_URL.$parent.$child['id'].'" data-letter="';						else						echo '<a href="'.BASE_URL.$parent.'" data-letter="';					}					else						echo '<a href="'.BASE_URL.$child['href'].'" data-letter="';					if($child['id']!='index') echo substr($child['name'],0,1);					echo '" class="link">';				}					echo $child['name'];				echo "</a>";				$el = $child;				$parentid = $child['id'].'/';				if($child['type']=='container')					if($child['id']=='index')						$parentid = '#';					else						$parentid = $child['id'].'#';				if(isset($_SESSION['lang'])&&$_SESSION['lang']!='fr')				{					$parentid = $_SESSION['lang']."/".$parentid;				}				if(count($child->children()))					$this->standardHTMLRecursive($child,$i,$id,$path,$parentid);			}		}		if($i>1) echo "</ul></li>";	}	public function html($path='./', $id=''){		echo "<nav id='navigation'><div><menu><li class='menu'><img src='".TEMPLATE_URL."/img/menu48.svg' /></li>";		$config = new Sing('cfg');		$this->HTMLRecursive($this -> xml,0,$id,$path);		echo "</menu></div></nav>\n";	}	public function standardHTML($path='./', $id=''){		$config = new Sing('cfg');		$theme = '_default'; if($config->get('theme')) $theme = $config->get('theme');		include(dirname(dirname(__FILE__)).'/htm/'.$theme.'/inc/nav.php');	}	public function anchorsHtml($path='./', $id=''){		$html="<nav class='main-navigation'><menu>";		$config = new Sing('cfg');		if($config->get('Logo'))			$html.= '<li><h1><a href="#index" data-panel="index"><img src="'.$path.'/ups/'.$config->xmlTag().'/'.$config->get('Logo').'" class="light" /></a></h1></li>';		else			if($config->get('Nom'))			{				$html.= '<li><h1><a href="'.$path.'">';				if($config->get('prefixe'))					$html.= $config->get('prefixe').' ';				$html.= $config->get('nom').'</a></h1></li>';			}else				$html.= '<li><a href="#'.$path.'">Accueil</a></li>';		foreach( $this -> xml -> children() as $element)		{			if($element['unlisted']!=1)			{			if($id==$element['id'])				$html.="<li class='active'>";			else				$html.="<li>";			if($element['type']!='lien')				$html.="<a href='#".$element['id']."' data-panel='".$element['id']."'>";			else				$html.="<a href='#".$element['href']."' data-panel='".$element['href']."'>";			$html.="<span>";			$html.=$element['name'];			$html.="</span>";			if($element['href']!='')				$html.="</a>";			$html.="</li>";		}		}		$html.="</menu></nav>";		echo $html;	}	public function allList(){		$array = Array();		foreach ($this->xml->xpath('//link') as $element)			$array[] = Array((string)$element['id'],(string)$element['name']);		return $array;	}	public function pagesList(){		$array = Array();		foreach ($this->xml->xpath('//link') as $element)			if($element['type']=='page' || $element['type']=='multipage' )				$array[] = Array((string)$element['id'],(string)$element['name']);		return $array;	}	public function subPagesList($id){		$array = Array();		foreach ($this->xml->xpath('//link[@id="'.$id.'"]/link') as $element)			if($element['type']=='page' ||  $element['type']=='module')				if(!isset($element['unlisted']) || isset($element['unlisted']) && $element['unlisted']==0)					$array[] = Array((string)$element['id'],(string)$element['name'],(string)$element['type'],(string)$element['href']);		return $array;	}	public function parent($id){		$array = Array();		$isRootElement = $this->isRootElement($id);		if(!$isRootElement)		{			$sxElement = $this->xml->xpath('//link[@id="'.$id.'"]');			return $sxElement[0]->xpath('..');		}		else			return false;	}	public function isRootElement($id){		$array = Array();		$isRootElement = false;		foreach ($this->xml->children() as $child) {				if($child['id']==$id)					$isRootElement = true;		}		return $isRootElement;	}	public function sectionMenu($id){		$liste = $this->subPagesList($id);		echo '<nav id="sections">';		echo '<menu>';		$first = true;		foreach($liste as $sub)		{			if($first){				echo '<li class="active">';				$first = false;			} else				echo '<li>';			echo '<a class="btn" href="javascript:section(\'#'.$sub[0].'\')">'.$sub[1].'</a>';			echo '</li>';		}		echo '</menu>';		echo '</nav>';	}	public function seoList(){		$array = Array();		foreach ($this->xml->xpath('//link') as $element)			if($element['type']!='lien')				$array[] = (string)$element['id'];		return $array;	}	public function navNext($id){		$found = false;		foreach ($this -> xml -> children() as $element)		{			if($found)				return $element['id'];			if($element['id'] == $id)				$found = true;		}		return false;	}	public function navList(){		$array = Array();		foreach ($this->xml->xpath('//link') as $element)			$array[] = (string)$element['id'];		return $array;	}	public function adminHtmlRecursive($element,$i,$id)	{		$i++;		$el = array('id'=>-1);		foreach ($element->children() as $child) {			$this->html.="\n";			if($id==$child['id'])			{			  $this->html.='<div class="line editline">';				$this->html.='<div class="inlineBlock lineField">';				$this->html.="<input type='text' name='name' value='".$child['name']."'/></div>";				$this->html.="<div class='inlineBlock lineField'><select name='type'><option value='page'";				if($child['type']=='page') $this->html.=' selected';				$this->html.=">Page</option><option value='module'";				if($child['type']=='module') $this->html.=' selected';				$this->html.=">Module</option><option value='lien'";				if($child['type']=='lien') $this->html.=' selected';				$this->html.=">Lien</option><option value='container'";				if($child['type']=='container') $this->html.=' selected';				$this->html.="></select>";				$this->html.="</div>";				$this->html.="<div class='inlineBlock lineField'><input type='text' name='href' value='".$child['href']."'/></div>";				$this->html.="<div class='inlineBlock lineField'><select name='parent'>";				$this->html.="<option value='' selected disabled>- parent</option>";				foreach( $this -> xml -> children() as $lien)				{					if($lien['id']!=$child['id'])					{						$this->html.="<option value='".$lien['id']."'";						if((string)$child['parent']==(string)$lien['id'])							$this->html.=" selected";						$this->html.=">";						$this->html.=$lien['name'];						$this->html.="</option>";					}				}				$this->html.="</select></div>";				$this->html.="<div class='inlineBlock'><input type='hidden' name='edit' value='".$child['id']."'/>";				$this->html.="<input type='submit' value='Enregistrer'/></div>";			} else {			 $this->html.='<div class="line';			 if($child['hidden']==1)			 		$this->html.=' hiddenline';			$this->html.=' line-'.$i;			 $this->html.='">'."\n";				$this->html.="<div class='inlineBlock'>";				if($child['type']=="lien")					$this->html.= $child['name']."</div>";				else					$this->html.="<a title='Éditer le contenu' href='./cms.php?path=".$child['id']."'>".$child['name']."</a></div>";				$this->html.="<div class='inlineBlock'>".$child['type']."</div>";				$this->html.="<div class='inlineBlock'>".$child['href']."</div>";				$this->html.="<div class='inlineBlock'>".$child['parent']."</div><div class='inlineBlock'>";				$this->html.='';				if($child['id']=='index')					$this->html.="<i class='icon-circle'></i>";				else {					if($child['hidden']!=1)						$this->html.="<a title='Rendre Visible/Invisible' href='".$_SERVER['PHP_SELF']."?a=hide&id=".$child['id']."'><i class='icon-circle'></i></a>";					else						$this->html.="<a href='".$_SERVER['PHP_SELF']."?a=show&id=".$child['id']."'><i class='icon-circle-empty'></i></a>";					}				if($child['unlisted']!=1)					$this->html.="<a title='Inclure dans la liste' href='".$_SERVER['PHP_SELF']."?a=unlist&id=".$child['id']."'><i class='icon-eye'></i></a>";				else					$this->html.="<a href='".$_SERVER['PHP_SELF']."?a=list&id=".$child['id']."'><i class='icon-eye-off'></i></a>";				$this->html.="<!--a title='Éditer le contenu' href='./cms.php?path=".$child['id']."'><i class='icon-doc-text-inv'></i></a-->";				if($child['id']!='index')					$this->html.="<a class='suppr' title='Supprimer' href='".$_SERVER['PHP_SELF']."?a=delete&id=".$child['id']."'><i class='icon-block'></i></a><a title='Modifier' href='".$_SERVER['PHP_SELF']."?a=edit&id=".$child['id']."'><i class='icon-pencil'></i></a>";				else					$this->html.="<i class='icon-block'></i><a  title='Modifier' href='".$_SERVER['PHP_SELF']."?a=edit&id=".$child['id']."'><i class='icon-pencil'></i></a>";				$this->html.= '<input type="hidden" name="order[]" value="'.$child['id'].'" />';				$this->html.= '<input type="hidden" name="parents[]" value="'.$child['parent'].'" />';				$this->html.="</div>"."\n";			}			$el = $child;			if(count($child->children()))				$this->adminHtmlRecursive($child,$i,$id);

			$this->html.="</div>"."\n";		}		//if($i==2)		//$this->html.='</div>';	}	public function adminHtml($id=''){		$html="<form name='nav' action='".$_SERVER['PHP_SELF']."' method='POST'><div class='form'>";		$count=0;		$this->adminHtmlRecursive($this->xml,0,$id);		$html.=$this->html;		if($id=='')		{			$html.="<div class='line addline'><div class='inlineBlock lineField'><input type='text' name='name' placeholder='Nom' /></div><div class='inlineBlock lineField'><select name='type'><option value='page'>Page</option><!--option value='multipage'>MultiPage</option--><option value='module'>Module</option><option value='container'>Container</option><!--option value='index'>Index</option--><option value='lien'>Lien</option></select></div><div class='inlineBlock lineField'><input type='text' name='href' placeholder='Ancre / Module' /></div>";			$html.="<div class='inlineBlock lineField'><select name='parent'>";			$html.="<option value='' selected disabled>- parent</option>";			foreach ($this->xml->xpath('//link') as $element)			{				$html.="<option value='".$element['id']."'>";				$html.=$element['name'];				$html.="</option>";			}			$html.="</select></div>";			$html.="<div class='inlineBlock'><!-- input type='hidden' name='order[]' / --><input type='submit' value='Enregistrer'/></div></div>";		}		$html.="</div></form>";		echo $html;	}	public function save() {		$dom = new DOMDocument('1.0', 'utf-8');		$dom->preserveWhiteSpace = false;		$dom->formatOutput = true;		$dom->loadXML($this -> xml -> asXML());		$dom->save( $this -> path );	}	function simplexml_insert_after(SimpleXMLElement $insert, SimpleXMLElement $target)	{		$target_dom = dom_import_simplexml($target);		$insert_dom = $target_dom->ownerDocument->importNode(dom_import_simplexml($insert), true);		if ($target_dom->nextSibling) {			return $target_dom->parentNode->insertBefore($insert_dom, $target_dom->nextSibling);		} else {			return $target_dom->parentNode->appendChild($insert_dom);		}	}	public function getElement($id) {		foreach ($this->xml->xpath('//link') as $element)			if( $element['id'] == $id )				return $element;	}	public function getOrder() {		$order = Array();		foreach ($this->xml->xpath('//link') as $element)			$order[] = (String)$element['id'];		return $order;	}	public function moveNode($nodeId,$parentId) {		$node = false;		$parent = false;		foreach ($this->xml->xpath('//link') as $element)		{			if($element['id'] == $nodeId)				$node = $element;			if($parentId!="" && $element['id'] == $parentId)				$parent = $element;		}		if(!$parent) $parent = $this->xml;		$dom_thing = dom_import_simplexml($parent);		$dom_node  = dom_import_simplexml($node);		$dom_new   = $dom_thing->appendChild($dom_node->cloneNode(true));		$new_node  = simplexml_import_dom($dom_new);		$new_node['id'] = "tmp";		$this->removeElement($nodeId);		$new_node['id'] = $nodeId;	}	// Adds an element "order" to each node	public function sortOrderRecursive($newOrder,$xmlNode) {		foreach ($xmlNode as $link) {			foreach ($newOrder as $key => $value)			  if ($link['id']==$value[0]) {					$link->addChild('order',$key);					$link->addChild('newParent',$value[1]);				}			$this->sortOrderRecursive($newOrder,$link);		}	}	public function sortArray($node) {		$domNode = dom_import_simplexml($node);		$domNew   = $domNode->cloneNode(true);		$newNode  = simplexml_import_dom($domNew);		$sortedArray = Array();		//$xml = xml2array($node);		$xml = $node;		//var_dump($xml);		foreach ($xml->link as $value) {				$sortedArray[(int)$value->order] = $value;		}
		ksort($sortedArray);		foreach($node->children() as $child)			unset($child);		foreach ($sortedArray as $sortedNode) {			sxml_append($node, $sortedNode);		}		return $node;	}	public function sortChildren($xmlNode) {		foreach ($xmlNode->children() as $child) {				if(isset($child->newParent) && isset($xmlNode['id'])) {					if((String)$child->newParent != (String)$xmlNode['id'] ) {						$id = (String)$child['id'];						$type = (String)$child['type'];						$href = (String)$child['href'];						$name = (String)$child['name'];						$parent = (String)$child->newParent;						if($parent=="nav") $parent = "";						$this->moveNode($id,$parent);
					}					$this->sortChildren($child);				}				if(!isset($xmlNode['id']))				{					if((String)$child->newParent!="nav") {					$id = (String)$child['id'];					$type = (String)$child['type'];					$href = (String)$child['href'];					$name = (String)$child['name'];					$parent = (String)$child->newParent;					$this->moveNode($id,$parent);}				}		}	}	public function sortOrder($newOrder,$parents) {		foreach($newOrder as $key => $order)			$newOrder[$key] = Array($order,$parents[$key]);		$this->sortOrderRecursive($newOrder,$this->xml->children());		$this->sortChildren($this->xml); 	 	foreach($this->xml as $test)		$this->sortChildren($test);	 foreach ($this->xml->xpath('//link') as $node)			$this->sortArray($node);		$this->xml = $this->sortArray($this->xml);		foreach ($this->xml->xpath('//order') as $child)			unset($child[0]);		foreach ($this->xml->xpath('//newParent') as $child)			unset($child[0]);		$this->save();	}}?>