<?phpclass Page {	private $path;	private $xml;	private $name;	private $exists = false;	private $index = 0;	public function __construct( $name, $title = '' ) {		$this -> name = false;		$this -> name = $name;		$lang = 'fr'; if(isset($_SESSION['lang'])) $lang = $_SESSION['lang'];		$this -> path = dirname(dirname(__FILE__)).'/xml/'.$lang.'/htm/'.$name.'.xml';		if(file_exists($this -> path)) {			$this -> xml = simplexml_load_file($this -> path);			$this -> exists = true;		}		else {			$this -> xml = new SimpleXMLElement('<page></page>');		}		if($title=='')			$title = ucfirst($name);		if(!isset($this -> xml -> meta))		{			$this -> xml -> addChild('meta');			$this -> xml -> meta -> addChild('title',$title);			$this -> xml -> meta -> addChild('description');		} else {			if(!isset($this -> xml -> meta -> title))				$this -> xml -> meta -> addChild('title',$title);			if(!isset($this -> xml -> meta -> description))				$this -> xml -> meta -> addChild('description');		}		if(!isset($this -> xml -> body))		{			$this -> xml -> addChild('body');			$this -> xml -> body -> addChild('h2',$title);			$this -> xml -> body -> addChild('article');		} else {			if(!isset($this -> xml -> body -> h2))			{				$this -> xml -> body -> addChild('h2',$title);			}			if(!isset($this -> xml -> body -> article))				$h2 = $this -> xml -> body -> addChild('article');		}	}	public function form() {		if(count($this->xml->xpath('//article'))>0)			foreach ($this->xml->xpath('//article') as $article)			{				echo "\n<textarea class='article' name='article[]' rows='25' cols='75' style='max-width: 99%;'>";					echo $article;				echo "</textarea>\n";			}		else		{			echo "\n<textarea class='article' name='article' id='article' rows='25' cols='75' style='max-width: 99%;'></textarea>";		}	}	public function bgInput() {		$files = glob("../ups/htm/".$this->name."*");		if(count($files)) {				sort($files, SORT_NATURAL | SORT_FLAG_CASE);				$first = array_pop($files);				array_unshift($files, $first);			}			foreach ($files as $filename)				echo "<div class='bg' style='background-image: url(".$filename."?d=".time().")' /><button><i class='icon-cancel-1'></i></button></div>";			echo "\n<input class='' type='file' name='bg'><span class='thumb'></span>";	}	public function bgList() {			$list = Array();			foreach (glob("./ups/htm/".$this->name."*.jpg") as $filename)				$list[] = $filename;			return $list;	}	public function bgSlideshow() {			echo "<ul class='tab-slideshow'>";			foreach ($this->bgList() as $bg)			{				echo "<li>";				echo "<img src='".$bg."' alt='' />";				echo "</li>";			}			echo "</ul>";	}	public function seoForm($idx,$action) {			$html="\n<input type='text' placeholder='Meta-Title' name='meta-title'";			$title = $this->getTitle();			$articles = $this->xml->xpath('//article');			if(!empty($title))				$html.="value='".str_replace("'",'&#39;', $title)."'";			$html.=">";			$html.="\n<input type='text' placeholder='Meta-Description' name='meta-description'";			$description = $this->getDescription();			if(!empty($title))				$html.="value='".str_replace("'",'&#39;', $description)."'";			$html.=">";			return $html;	}	public function updateSEO($title,$description) {		$this -> xml -> meta -> title = $title;		$this -> xml -> meta -> description = $description;	}	public function updateArticles($articles,$anchors) {		$articles = str_replace('&', '&amp;',$articles);		$anchors = str_replace('&', '&amp;',$anchors);		if(!is_array($articles))			$articles = array($articles);		if(!is_array($anchors))			$anchors = array($anchors);		unset($this->xml -> body -> article);		$i = 0;		foreach ($articles as $article)		{			if($article!='')			{				$art = $this->xml -> body -> addChild('article',$article);				$art->addAttribute('id',$anchors[$i++]);			}		}	}	public function recursiveFileName($name,$first = true) {		if(file_exists("../ups/htm/".$name.".jpg"))		{			if($first)			{				$name = $name."-1";			} else {				$name = substr($name, 0, -1).(1+intval(substr($name, -1)));			}			return $this->recursiveFileName($name,false);		}		return $name;	}	public function updateBackground($bg,$comp,$name) {		if(!empty($bg))		{			if(file_exists("../ups/tmp/".$bg))			{				$ext = pathinfo("../ups/tmp/".$bg, PATHINFO_EXTENSION);				$name = $this->recursiveFileName($name);				if(!empty($comp))					resizeImage(1080,"../ups/tmp/".$bg,"../ups/tmp/".$bg);				copy("../ups/tmp/".$bg,"../ups/htm/".$name.".".$ext);			}			if(!property_exists($this->xml -> body , 'backgrounds'))				$this->xml -> body -> addChild('backgrounds');			$this->xml -> body ->backgrounds -> addChild('background',$bg) ;		} else {			unlink($name);		}	}	public function background() {		$html='';		$title = '';		if(isset($_GET['path']))			$_PATH = explode('/',$_GET['path'] );		else		$_PATH = Array();			if(isset($_PATH[1]) && strlen($_PATH[1])==2)				array_shift($_PATH);			if(isset($_PATH[1]) && $_PATH[1]!=$this -> xml -> meta -> title)			{				$nav = new Nav();				$element = $nav->getElement(($_PATH[0]));				if($element['type']=='module')				{					require_once('./app/class.multi.php');					$fields = new Multi($element['href']);					$fields = $fields->getJSON();					foreach($fields as $field)					{						if(isset($field['id']) && $field['id']==$_PATH[1])							if(isset($field['fond'])&&!empty($field['fond']))							{								$html .= '<div class="background-container">';								$html .= '<div class="background" style="background-image: url('.BASE_URL.'ups/lexique/'.$field['fond'].')" data-ld="'.BASE_URL.'ups/mobile/lexique/'.$field['fond'].'" data-hd="'.BASE_URL.'ups/lexique/'.$field['fond'].'"></div>';								$html .= '</div>';							} else {									$files = glob(dirname(dirname(__FILE__))."/ups/htm/".$this->name."*.*");									if($this->name)									if(!empty($files) && file_exists($files[0]))									{										if(count($files)) {											sort($files, SORT_NATURAL | SORT_FLAG_CASE);											$first = array_pop($files);											array_unshift($files, $first);										}										$html .= '<div class="background-container">';										$i = count($files);										foreach($files as $file)										{											$ext = pathinfo($file[0], PATHINFO_EXTENSION);											$html .= '<div class="background" style="background-image: url('.BASE_URL.'ups/htm/'.basename($file).')" data-ld="'.BASE_URL.'ups/htm/mobile/'.basename($file).'" data-hd="'.BASE_URL.'ups/htm/'.basename($file).'"></div>';											//$html .= '<img class="background" src="'.BASE_URL.'ups/htm/'.basename($file).'" style="z-index:'.$i--.'" />';										}										$html .= '</div>';									}							}					}				} else {				$files = glob(dirname(dirname(__FILE__))."/ups/htm/".$this->name."*.*");				if($this->name)				if(!empty($files) && file_exists($files[0]))				{					if(count($files)) {						sort($files, SORT_NATURAL | SORT_FLAG_CASE);						$first = array_pop($files);						array_unshift($files, $first);					}					$html .= '<div class="background-container">';					$i = count($files);					foreach($files as $file)					{						$ext = pathinfo($file[0], PATHINFO_EXTENSION);						$html .= '<div class="background" style="background-image: url('.BASE_URL.'ups/htm/'.basename($file).')" data-ld="'.BASE_URL.'ups/htm/mobile/'.basename($file).'" data-hd="'.BASE_URL.'ups/htm/'.basename($file).'"></div>';						//$html .= '<img class="background" src="'.BASE_URL.'ups/htm/'.basename($file).'" style="z-index:'.$i--.'" />';					}					$html .= '</div>';				}				}			} else {				$files = glob(dirname(dirname(__FILE__))."/ups/htm/".$this->name."*.*");				if($this->name)				if(!empty($files) && file_exists($files[0]))				{					if(count($files)) {						sort($files, SORT_NATURAL | SORT_FLAG_CASE);						$first = array_pop($files);						array_unshift($files, $first);					}					$html .= '<div class="background-container">';					$i = count($files);					foreach($files as $file)					{						$ext = pathinfo($file[0], PATHINFO_EXTENSION);						$html .= '<div class="background" style="background-image: url('.BASE_URL.'ups/htm/'.basename($file).')" data-ld="'.BASE_URL.'ups/htm/mobile/'.basename($file).'" data-hd="'.BASE_URL.'ups/htm/'.basename($file).'"></div>';						//$html .= '<img class="background" src="'.BASE_URL.'ups/htm/'.basename($file).'" style="z-index:'.$i--.'" />';					}					$html .= '</div>';				}			}		return $html;	}	public function backgroundImg() {		$html='';		$files = glob(dirname(dirname(__FILE__))."/ups/htm/".$this->name."*.*");		if($this->name)		if(!empty($files) && file_exists($files[0]))		{			if(count($files)) {				sort($files, SORT_NATURAL | SORT_FLAG_CASE);				$first = array_pop($files);				array_unshift($files, $first);			}			$html .= '<div class="background-container">';			$i = count($files);			foreach($files as $file)			{				$ext = pathinfo($file[0], PATHINFO_EXTENSION);				$html .= '<img class="background" src="'.BASE_URL.'ups/htm/'.basename($file).'" style="z-index:'.$i--.'" />';			}			$html .= '</div>';		}else {			$html ='';		}		return $html;	}	public function save() {		$dom = new DOMDocument('1.0', 'utf-8');		$dom->preserveWhiteSpace = false;		$dom->formatOutput = true;		$dom->loadXML($this -> xml -> asXML());		$dom->save( $this -> path );	}	public function encodeHTML($html, $chars=0) {		if($chars!=0)			$html = substr($html, 0, $chars);		if(basename(dirname(dirname(__FILE__)))!=basename($_SERVER['DOCUMENT_ROOT']))			$url = "/".basename(dirname(dirname(__FILE__)))."/";		else			$url = "/";		$url .= "ups/www/";		$patterns = array();		$replacements = array();		$patterns[] = "/\|(.*?)\|/";		$replacements[] = "<div>\\1</div>";		$patterns[] = "/--(.*?)--/";		$replacements[] = "<strike>\\1</strike>";		$patterns[] = "/\*\*(.*?)\*\*/";		$replacements[] = "<strong>\\1</strong>";		$patterns[] = "/\*(.*?)\*/";		$replacements[] = "<em>\\1</em>";		$patterns[] = "/\^(\w*)/";		$replacements[] = "<sup>\\1</sup>";		$patterns[] = "/^\>\s(.*)$/m";		$replacements[] = "</p><blockquote>\\1</blockquote><p>";		$patterns[] = "/^\*\s(.*?)$/m";		$replacements[] = "<li>\\1</li>";		$patterns[] = "/^center\-\s(.*?)$/m";		$replacements[] = "<p class='center'>\\1</p><p>";		$patterns[] = "/^left\-\s(.*?)$/m";		$replacements[] = "<p class='left'>\\1</p><p>";		$patterns[] = "/^right\-\s(.*?)$/m";		$replacements[] = "<p class='right'>\\1</p><p>";		$patterns[] = "/^centre\-\s(.*?)$/m";		$replacements[] = "<p class='center'>\\1</p><p>";		$patterns[] = "/^gauche\-\s(.*?)$/m";		$replacements[] = "<p class='left'>\\1</p><p>";		$patterns[] = "/^droite\-\s(.*?)$/m";		$replacements[] = "<p class='right'>\\1</p><p>";		$patterns[] = "/^h1\-\s(.*?)$/m";		$replacements[] = "<h1>\\1</h1><p>";		$patterns[] = "/^h2\-\s(.*?)$/m";		$replacements[] = "<h2><span>\\1</span></h2><p>";		$patterns[] = "/^h3\-\s(.*?)$/m";		$replacements[] = "<h3>\\1</h3><p>";		$patterns[] = "/^h4\-\s(.*?)$/m";		$replacements[] = "<h4>\\1</h4><p>";		$patterns[] = "/\[(.*?)\]\((.*?)\)/";		$replacements[] = "<a href='\\2'>\\1</a>";		  	/*$patterns[] = "/\[img src=\"(.*?)\" title=\"(.*?)\"\]/";				$replacements[] = "<a class=\"gal\" href=\"".$url."\\1\"><span style=\"background-image: url('".$url."\\1')\" /></span></a>";		    */			$patterns[] = "/\[img src=\"(.*?)\"\]/";				$replacements[] = "<img src=\"".$url."\\1\" />";		//$replacements[] = "<img src='".$url."\\1' />";		$patterns[] = "/\[youtube src=\"(.*?)\"\]/";		$replacements[] = "<div class=\"js-video widescreen\"><iframe width=\"640\" height=\"360\" src=\"\\1\" frameborder=\"0\" allowfullscreen></iframe></div>";		$patterns[] = "/\[(.*?)\](.*?)\[\/(.*?)\]/";		$replacements[] = "<\\1>\\2</\\1>";		$html = preg_replace($patterns, $replacements, $html);		$html = str_replace(array("\r\n\r\n", "\r\r", "\n\n"), "</p><p>", $html);		$html = str_replace(array("\r\n", "\r", "\n"), "<br />", $html);		$html = str_replace("</li><br /><li>", "</li><li>", $html);		$html = str_replace("</li><br />", "</li><p>", $html);		$html = str_replace("<br /></li>", "</li>", $html);		$html = str_replace("<p><br /><br />", "<p>", $html);		$html = str_replace("<br /></blockquote>", "</blockquote>", $html);		$html = "<p>".$html;		$html = $html."</p>";		//$html = str_replace("<p></p>", "", $html);		$html = str_replace("<p><p", "<p", $html);		echo $html;	}	public function getName () {		return (string) $this -> name;	}	public function getH2 () {		return (string) $this -> xml -> body -> h2;	}	public function getTitle () {		$title = '';		if(isset($_GET['path']))		{		$_PATH = explode('/',$_GET['path'] );		if(isset($_PATH[1]) && strlen($_PATH[1])==2)			array_shift($_PATH);			if(isset($_PATH[1]) && $_PATH[1]!=$this -> xml -> meta -> title)			{				$nav = new Nav();				$element = $nav->getElement(($_PATH[0]));				if($element['type']=='module')				{					require_once('./app/class.multi.php');					$fields = new Multi($element['href']);					$fields = $fields->getJSON();					foreach($fields as $field)					{						if(isset($field['id']) && $field['id']==$_PATH[1])							if(isset($field['titre'])&&$field['titre']!='')								$title=$field['titre'];					}				}			}		}			if($title!="")				return $title;			else				return $this ->	xml -> meta -> title;	}	public function getDescription () {		return (string) $this -> xml -> meta -> description;	}	public function is404 () {		return !$this->exists;	}	public function article() {		$html = '';		if($this->index < count($this -> xml -> body -> article))		{			$article = $this->encodeHTML ( $this -> xml -> body -> article[$this->index++] );			if(!empty($article))			{				$html .=  "<article id='".$this -> xml -> body -> article['id']."'>";				$html .=  $this->encodeHTML ( $this -> xml -> body -> article[$this->index++] );				$html .=  "</article>";			}		}		return $html;	}	public function HTML($class='') {		foreach ($this->xml->xpath('//article') as $article)		{			if(!empty($article->{0}))			{					//echo "<article class='".idfy($article['id'])."'>";				if(!empty($article['id']))					echo "<article>";				else					echo "<article class='texte'>";				echo "<div";				if(!empty($class))					echo ' class="'.$class.'"';				echo ">";				if(!empty($article['id']))					echo "<h2>".encodeHTML(first_letter($article['id'], '<span class="f">$1</span>'))."</h2>";				echo $this->encodeHTML($article);				echo "</div></article>";			}		}	}	public function allArticles($class='') {		foreach ($this->xml->xpath('//article') as $article)		{			if(!empty($article['id']))				echo "<article id='".idfy($article['id'])."'>";			else				echo "<article>";			if(!empty($article['id']))				echo "<h4>".first_letter($article['id'], '<span class="f">$1</span>')."</h4>";			echo "<div";			if(!empty($class))				echo ' class="'.$class.'"';			echo ">";			echo $this->encodeHTML($article);			echo "</div></article>";		}	}	public function articlesMenu() {		$articles = $this->xml->xpath('//article');		if(count($articles)>1)		{			$first = true;			echo "<menu>";			foreach ( $articles as $article)			{				if($first)				{					echo "<li class='active'>";					$first = false;				}				else					echo "<li>";				echo "<a href='#".idfy($article['id'])."'>";				echo $article['id'];				echo "</a>";			}			echo "</menu>";		}	}	public function setH2 ( $h2 ) {		$this -> xml -> body -> h2 = $h2;	}	public function setTitle ( $title ) {		$this -> xml -> meta -> title = $title;	}	public function setDescription ( $description ) {		$this -> xml -> meta -> description = $description;	}}?>