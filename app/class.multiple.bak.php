<?php require_once dirname(__FILE__)."/functions.php";abstract class Multiple {	private $xml;	private $path;	private $visible;	private $xmltag;	private $elements;	public function __construct($xmltag = "multi", $elements = Array()) {		$this->xmltag = $xmltag;		$this->elements = $elements;		$lang = 'fr'; if(isset($_SESSION['lang'])) $lang = $_SESSION['lang'];		$this -> path = dirname(dirname(__FILE__)).'/xml/'.$lang.'/'.$xmltag.'.xml';		if(file_exists( $this -> path))		{			$context  = stream_context_create(array('http' => array('header' => 'Accept: application/xml')));			$xml = file_get_contents($this -> path, false, $context);			if ( substr_count ( $xml , '<' ) < 2 )				$this -> xml = new SimpleXMLElement('<'.$xmltag.'></'.$xmltag.'>');			else				$this -> xml = simplexml_load_string($xml);		} else			$this -> xml = new SimpleXMLElement('<'.$xmltag.'></'.$xmltag.'>');	}	public function  getXmlTag() {		return $this->xmltag;	}	public function getElements(){		return $this->elements;	}	public function newElement($post) {		if(isset($post['n']))		{			$this->update($post);		} else {			if(isset($post['order'])) unset($post['order']);			if(!empty($post))			{			foreach($this->getElements() as $element)					if($element[0]=='file' && !empty($post[idfy($element[1]['name'])]))						if(file_exists("../ups/tmp/".$post[idfy($element[1]['name'])]))							copy("../ups/tmp/".$post[idfy($element[1]['name'])],"../ups/".$this->getXmlTag()."/".$post[idfy($element[1]['name'])]);			$files = glob('../ups/tmp/*');			foreach($files as $file){				if(is_file($file))					unlink($file);			}			$elements = $this->getElements();			foreach($elements as $element)				if(isset($post[idfy($element[1]['name'])]))					$array[idfy($element[1]['name'])] = $post[idfy($element[1]['name'])];				else					$array[idfy($element[1]['name'])] = '';			$return = '<element>';			foreach($array as $key => $item)				$return .= "<{$key}>{$item}</{$key}>";			$return .= '</element>';			$xmlElement = new SimpleXMLElement($return);			$xmlElement->addAttribute('visible',0);			$xmlElement->addAttribute('id',idfy(array_values($array)[0]));			$this->visible = 0;			$this->simplexml_prependChild($xmlElement);			}		}	}	public function update($post) {			foreach($this->getElements() as $element)			{				if(($element[0]=='file'|| $element[0]=='gallery') && !empty($post[idfy($element[1]['name'])]))					if(file_exists("../ups/tmp/".idfy($post[idfy($element[1]['name'])])))					{						copy("../ups/tmp/".idfy($post[idfy($element[1]['name'])]),"../ups/".$this->getXmlTag()."/".idfy($post[idfy($element[1]['name'])]));					}			}			$files = glob('../ups/tmp/*');			foreach($files as $file){				if(is_file($file))					unlink($file);			}			$elements = $this->getElements();			foreach($elements as $element)				if(isset($post[idfy($element[1]['name'])]))				{					if($element[0]=='file')						$array[idfy($element[1]['name'])] = idfy($post[idfy($element[1]['name'])]);					else						$array[idfy($element[1]['name'])] = $post[idfy($element[1]['name'])];				}				else					$array[idfy($element[1]['name'])] = '';			$return = '<element';			$return .= ' visible="'.intval($this->xml->element[(int)$post['n']]['visible']).'">';			foreach($array as $key => $item)				$return .= "<{$key}>".str_replace('&','&amp;amp;',$item)."</{$key}>";			$return .= '</element>';			$this->simplexml_replace($this->xml->element[(int)$post['n']], simplexml_load_string($return));	}	public function adminHtml($get=Array('a'=>'')){		if(isset($get['a']))		switch ($get['a'])		{			case 'down':				$this->downElement($get['n']);				$this->save();				$this->adminList();			break;			case 'delete':				$this->removeElement($get['n']);				$this->save();				$this->adminList();			break;			case 'edit':				$this->adminForm($get['n']);			break;			case 'show':				$this->setVisible($get['n'],1);				$this->save();				$this->adminList();			break;			case 'hide':				$this->setVisible($get['n'],0);				$this->save();				$this->adminList();			break;			default:				$this->adminList();			break;		} else $this->adminList();	}	public function adminForm($id) {		$xmlElement = $this->xml->element[(int)$id];		$html="<form name='".$this->getXmlTag()."' action='".strtok($_SERVER["REQUEST_URI"],'?')."' method='POST'>";		$array = json_decode(json_encode($xmlElement), TRUE);		$elements = $this->getElements();		$sep = round( count($elements)/2 );		$html.="<div class='col'>";		$i = 0;		foreach( $elements as $element )		{			$html.="<p>";			$html.="<label>".$element[1]['name']."</label>";			switch($element[0])			{				case 'radio':					$html .= "<span class='radio'>";					foreach($element[2] as $radio)					{						$html.="<input type='radio' name='".idfy($element[1]['name'])."' value='".$radio."'";						if(isset($array[idfy($element[1]['name'])]))							if($array[idfy($element[1]['name'])]==$radio)								$html.=" checked='checked'";						$html.="/>".$radio." ";					}					$html .= "</span>";				break;				case 'checkbox':					$html.="<input type='checkbox'  name='".idfy($element[1]['name'])."[]'";					if(!empty($array[idfy($element[1]['name'])]))						if($array[idfy($element[1]['name'])]==1)							$html.=" checked";					$html.=" />";				break;				case 'file':					if(!empty($array[idfy($element[1]['name'])]))					{						$html.="<input type='hidden' name='".idfy($element[1]['name'])."' value='".$array[idfy($element[1]['name'])]."' />";						if(substr(strrchr($array[idfy($element[1]['name'])],'.'),1)=='pdf')							$html.="<span class='thumb'><button><i class='icon-cancel-1'></i></button><a target='_blank' href='../ups/".$this->getXmlTag()."/".$array[idfy($element[1]['name'])]."'>".$array[idfy($element[1]['name'])]."</a></span>";						else							$html.="<span class='thumb'><button><i class='icon-cancel-1'></i></button><img src='../ups/".$this->getXmlTag()."/".$array[idfy($element[1]['name'])]."' /></span>";					} else {						$html.="<input type='file' class='".idfy($element[1]['name'])."' name='".idfy($element[1]['name'])."'/>";						$html.="<span class='thumb'></span>";					}				break;				case 'textarea':					$html.="<textarea rows=10 cols=61 name='".idfy($element[1]['name'])."'>";					if(!empty($array[idfy($element[1]['name'])]))						$html.=str_replace('\'','&#39;',$array[idfy($element[1]['name'])]);					$html.='</textarea>';					break;				case 'wysiwyg':					$html.='<span class="wysiwyg">';					$html.='<a class="popup-with-form" href="#media" data-textarea="'.idfy($element[1]['name']).'"><span><i class="icon-upload-cloud"></i></span></a>';					$html.='<a href="javascript:tag(\''.idfy($element[1]['name']).'\',\'**\')" data-textarea="'.idfy($element[1]['name']).'"><span style="font-weight:bold">A</span></a>';					$html.='<a href="javascript:tag(\''.idfy($element[1]['name']).'\',\'*\')" data-textarea="'.idfy($element[1]['name']).'"><span style="font-style:italic">A</span></a>';					$html.='<a href="javascript:tag(\''.idfy($element[1]['name']).'\',\'--\')" data-textarea="'.idfy($element[1]['name']).'"><span><strike>A</strike></span></a>';					$html.='</span><br>';					$html.="<textarea rows=10 cols=61 name='".idfy($element[1]['name'])."'>";					if(!empty($array[idfy($element[1]['name'])]))						$html.=str_replace('\'','&#39;',$array[idfy($element[1]['name'])]);					$html.='</textarea>';					$html.='<div class="preview"><span class="wysiwyg-preview">Aperçu</span></div>';					break;				case 'text':				case 'date':				case 'password':					$html.="<input type='".$element[0]."' name='".idfy($element[1]['name'])."' value='";					if(!empty($array[idfy($element[1]['name'])]))						$html.=str_replace('\'','&#39;',$array[idfy($element[1]['name'])]);					$html.="' />";				break;				case 'gallery':						$directory = dirname(dirname(__FILE__)).'/ups/img/';						$scanned_directory = array_diff(scandir($directory), array('..', '.'));						$html .= '<select name="'.idfy($element[1]['name']).'">';						$html .= '<option value=""></option>';						foreach($scanned_directory  as $file)						{						if(is_dir($directory.$file))						{							$html .= '<option value="'.$file.'" ';							if(!empty($array[idfy($element[1]['name'])]) && $array[idfy($element[1]['name'])] == $file)								$html .= 'selected';							$html .= '>'.$file.'</option>';						}						}						$html .= "</select>";				break;				default:					// $html.= $element[0];					$path = dirname(dirname(__FILE__)).'/xml/fr/'.$element[0].'.xml';					if(file_exists( $path ))					{						$context  = stream_context_create(array('http' => array('header' => 'Accept: application/xml')));						$xml = file_get_contents($path, false, $context);						$xmlDonnee = simplexml_load_string($xml);						$array2 = json_decode(json_encode($xmlDonnee), TRUE);						$html .= '<select name="'.idfy($element[1]['name']).'">';						$html .= '<option value=""></option>';						foreach($array2['element'] as $element2)						{							$html .= '<option value="'.$element2['id'].'" ';							if(!empty($array[idfy($element[1]['name'])]) && $array[idfy($element[1]['name'])] == $element2['id'])								$html .= 'selected';							$html .= '>'.$element2['nom'].'</option>';						}						$html .= "</select>";					}					else						$html.= "La classe <i>".$element[0]."</i> n'existe pas ou n'a pas d'enregistrements.";				break;			}			$html.="</p>";			if(--$sep==0)				$html.="</div><div class='col'>";		}		$html.="</div>";		$html.="<p><input type='hidden' name='action' value='edit' /><input type='hidden' name='n' value='".$id."' /><input id='save-and-edit' type='submit' value='Enregistrer' /><br><input type='submit' value='Enregistrer et Fermer' /></p>";		if($id!=0)		$html.="<a href='./".$this->xmltag."?a=edit&n=".($id-1)."' class='prev'>Élément précédent</a> - ";		$html.="<a href='./".$this->xmltag."?a=edit&n=".($id+1)."' class='next'>Élément suivant</a> - ";		$html.="<a href='./".$this->xmltag."' class='next'>Annuler</a>";		$html.="</form>			<form id='media' name='media' class='white-popup-block mfp-hide'>				<h3>Ajout de Média</h3>				<p>					<input type='file' name='media' />					<span class='thumb'></span>				</p>				<button>Insérer dans l'article</button>			</form>";		echo $html;	}	public function adminList() {		$html="<form name='news' action='".strtok($_SERVER["REQUEST_URI"],'?')."' method='POST'>";		$i=0; $count=0;		$line= '';		foreach($this->getElements() as $formElement)		{			if($i<4)			{				if($formElement[0]=='text')				{					$line .= '<div class="inlineBlock lineField"><input type="text" name="'.idfy($formElement[1]['name']).'" placeholder="'.$formElement[1]['name'].'" /></div>';					$i++;				}				if($formElement[0]=='date')				{					$line .= '<div class="inlineBlock lineField"><input type="date" name="'.idfy($formElement[1]['name']).'" value="'.date('Y-m-d',time()).'" /></div>';					$i++;				}			}		}		$line .= '<div class="inlineBlock">';		$line .= '<input type="hidden" name="action" value="ajout" /><input type="submit" value="enregistrer" /></div>';		$html .= '<div class="form cols-'.++$i.'">		<div class="addline line">'.$line.'</div>';		$el = array('id'=>-1);		$count=0;		foreach( $this -> xml -> children() as $element)		{			if(!isset($get['id']))			{				$i = 0;				$visible = 0;				if(isset($element['visible']))					$visible = $element['visible'];				else					$element->addAttribute('visible',0);				$html .= '<div class="line';				if($visible==0)						$html.=' hiddenline';				$html.='">';				foreach($this->getElements() as $formElement)				{					if($i<4)					{					if($formElement[0]=='text')					{						$val = $element->xpath('./'.idfy($formElement[1]['name']).'');						$html .= '<div class="inlineBlock">';						if(isset($val[0]))							$html .= (String)$val[0];						$html .= '</div>';						$i++;					}					if($formElement[0]=='date')					{						$val = $element->xpath('./'.idfy($formElement[1]['name']).'');						$html .= '<div class="inlineBlock">';						if(isset($val[0]))							$html .= date('d/m/Y', strtotime((String)$val[0]));						$html .= '</div>';						$i++;					}					}				}				if($visible==0)					$html.="<div class='inlineBlock'> <a href='".strtok($_SERVER["REQUEST_URI"],'?')."?a=show&n=".($count)."'><i class='icon-circle-empty'></i></a> ";				else					$html.="<div class='inlineBlock'><a href='".strtok($_SERVER["REQUEST_URI"],'?')."?a=hide&n=".($count)."'><i class='icon-circle'></i></a> ";				$html.="<a href='".strtok($_SERVER["REQUEST_URI"],'?')."?a=edit&n=".($count)."'><i class='icon-pencil'></i></a> <a class='suppr' href='".strtok($_SERVER["REQUEST_URI"],'?')."?a=delete&n=".$count."'><i class='icon-block'></i></a>";				/*if($el['id']!=-1)					$html.=" <a href='".strtok($_SERVER["REQUEST_URI"],'?')."?a=down&n=".($count-1)."'><i class='icon-up-open'></i></a>";				else					$html.="";*/				$html.= '<input type="hidden" name="order[]" value="'.$count++.'" />';				$html.=" </div>";				$html.="</div>";			}			$el = $element;		}		$html.="</div></form>";		echo $html;	}	public function formHTML() {		$html="<form name='news' action='".strtok($_SERVER["REQUEST_URI"],'?')."' method='POST'><div class='form'>";		foreach($this->getElements() as $formElement)		{			if($formElement[0]=='text')				$html .= '<input type="text" name="'.idfy($formElement[1]['name']).'" placeholder="'.$formElement[1]['name'].'" /><br />';			if($formElement[0]=='date')				$html .= '<input type="date" name="'.idfy($formElement[1]['name']).'" value="'.date('Y-m-d',time()).'" /><br />';		}		$html .= '<input type="hidden" name="action" value="ajout" /><input type="submit" value="ajouter" /></div></form>';		echo $html;	}	public function removeElement($id) {		$count = 0;		$id++;		foreach( $this -> xml -> children() as $element)			if( ++$count == $id )			{				$dom=dom_import_simplexml($element);				$dom->parentNode->removeChild($dom);				return true;			}		return false;	}	public function downElement($id) {		$count = 0;		$next = false;		foreach( $this -> xml -> children() as $element)		{			if($next)			{				$next = false;				$this->removeElement($id);				$this->simplexml_insert_after($el,$element);				return true;			}			if( ++$count == $id )			{				$el = $element;				$next = true;			}		}		return false;	}	public function navPrev($id){		$link=false;		foreach ($this->xml->xpath('//element') as $element)		{			if((String)$element->id == $id)			return $link;			$link = $element;		}		return false;	}	public function navNext($id){		$found = false;		foreach ($this->xml->xpath('//element') as $element)		{			if($found)			return $element;			if((String)$element->id == $id)			$found = true;		}		return false;	}	public function save() {		$dom = new DOMDocument('1.0', 'utf-8');		$dom->preserveWhiteSpace = false;		$dom->formatOutput = true;		$dom->loadXML($this -> xml -> asXML());		$dom->save( $this -> path );	}	function simplexml_insert_after(SimpleXMLElement $insert, SimpleXMLElement $target)	{		$target_dom = dom_import_simplexml($target);		$insert_dom = $target_dom->ownerDocument->importNode(dom_import_simplexml($insert), true);		if ($target_dom->nextSibling) {			return $target_dom->parentNode->insertBefore($insert_dom, $target_dom->nextSibling);		} else {			return $target_dom->parentNode->appendChild($insert_dom);		}	}	function simplexml_prependChild(SimpleXMLElement $insert)    {		$target_dom = dom_import_simplexml($this->xml);		$insert_dom = $target_dom->ownerDocument->importNode(dom_import_simplexml($insert), true);        return $target_dom->insertBefore($insert_dom,$target_dom->firstChild);    }	public function simplexml_replace(SimpleXMLElement $element, SimpleXMLElement $substitute) {		$dom     = dom_import_simplexml($element);		$import  = $dom->ownerDocument->importNode(			dom_import_simplexml($substitute),			TRUE		);		$dom->parentNode->replaceChild($import, $dom);	}	public function getJSON() {		if(count($this->xml->children())==0) return array();		$array = json_decode(json_encode($this->xml), TRUE);		return array_values($array)[0];	}	public function getLast() {		if(count($this->xml->children())==0) return array();		$array = json_decode(json_encode($this->xml), TRUE);		return $array['element'][0];	}	public function getRandom() {		if(count($this->xml->children())==0) return array();		$array = json_decode(json_encode($this->xml), TRUE);		shuffle($array['element']);		return $array['element'][0];	}	public function setVisible($id,$value) {		$count = 0;		foreach( $this -> xml -> children() as $element)			if( $count++ == $id )			{				if(!isset($element['visible']))					$element->AddAttribute('visible',$value);				else					$element['visible'] = $value;				return true;			}		return false;	}	public function getOrder() {		$order = Array();		foreach ($this->xml->xpath('//element') as $element)			$order[] = (String)$element['id'];		return $order;	}	public function sortOrder($newOrder) {		$count = 0;		foreach( $this -> xml -> children() as $k => $element)		{		    foreach ($newOrder as $key => $value)				{		        if ($count==(int)$key) $element->addChild('order',$value);		 	}			$count++;		}		$sort_func = function($obj_1, $obj_2)     {             return strnatcasecmp((String)$obj_2->order, (String)$obj_1->order);     };		 $xml = xml2array($this->xml->children());		 $lonely = false;		 $sortedArray = Array();     foreach ($xml as $value) {			 	if(isset($value['order']))			 		$lonely = true;				else		     foreach ($value as $v) {		     		$sortedArray[(int)$v->order] = $v;		     }     }		 if(!$lonely) {		 ksort($sortedArray);		$sxml = simplexml_load_string("<".$this->xmltag."></".$this->xmltag.">");		foreach ($sortedArray as $node) {			sxml_append($sxml, $node);		}		$this->xml = $sxml;		}		foreach ($this->xml->xpath('//order') as $child)		    unset($child[0]);				$this->save();	}}?>